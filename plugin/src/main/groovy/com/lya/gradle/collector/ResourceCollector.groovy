package com.lya.gradle.collector

import com.android.build.gradle.tasks.ProcessAndroidResources
import com.android.builder.dependency.level2.AndroidDependency
import com.google.common.collect.ArrayListMultimap
import com.google.common.collect.ListMultimap
import com.google.common.collect.Lists
import com.lya.gradle.Extension
import com.lya.gradle.collector.res.ResourceEntry
import com.lya.gradle.collector.res.StyleableEntry
import org.gradle.api.Project

/**
 * Collect all(host+plugin) resources&styleables in the APK and reassign the resource ID
 *
 * @author zhengtao
 */
class ResourceCollector {

    private boolean showLog = true
    private Project project
    private Extension extension

    /**
     * Gradle task of process resource in Android build system
     */
    private ProcessAndroidResources processResTask
    /**
     * R symbol File that records all resources, generated by aapt
     */
    private File allRSymbolFile
    /**
     * Host R symbol File, need saved after the host APK compilation
     */
    private File commonRSymbolFile

    /**
     * Map of all resources, KEY is the resource type, e.g. drawable, VALUE is all entries of this type
     */
    ListMultimap<String, ResourceEntry> allResources = ArrayListMultimap.create()
    /**
     * List of all styleables
     */
    List<StyleableEntry> allStyleables = Lists.newArrayList()


    private ListMultimap<String, ResourceEntry> hostResources = ArrayListMultimap.create()
    private List<StyleableEntry> hostStyleables = Lists.newArrayList()

    /**
     * pluginResources = allResources - hostResources
     */
    ListMultimap<String, ResourceEntry> pluginResources = ArrayListMultimap.create()
    List<StyleableEntry> pluginStyleables = Lists.newArrayList()

    ResourceCollector(Project project, ProcessAndroidResources par) {

        this.project = project
        extension = project.packageIdModifier

        processResTask = par

        allRSymbolFile = new File(par.textSymbolOutputDir, 'R.txt')
        if (showLog) {
            println '=========allRSymbolFile path: ' + allRSymbolFile.getPath()
        }
        commonRSymbolFile = new File(project.rootDir, "common_R.txt")
    }

    void collect() {

        //1、First, collect all resources by parsing the R symbol file.
        if (showLog) {
            println '==========parseResEntries allRSymbolFile'
        }
        parseResEntries(allRSymbolFile, allResources, allStyleables)

        //2、Then, collect host resources by parsing the host apk R symbol file, should be stripped.
        if (showLog) {
            println '==========parseResEntries commonRSymbolFile'
        }
        parseResEntries(commonRSymbolFile, hostResources, hostStyleables)

        //3、Compute the resources that should be retained in the plugin apk.
        filterPluginResources()

        //4、Reassign the resource ID. If the resource entry exists in host apk, the reassign ID
        //   should be same with value in host apk; If the resource entry is owned by plugin project,
        //   then we should recalculate the ID value.
        reassignPluginResourceId()

        //5、Collect all the resources in the retained AARs, to regenerate the R java file that uses the new resource ID
        extension.retainedAarLibs.each {
            if (showLog) {
                println 'retainedAarLibs: ' + it
            }
            gatherReservedAarResources(it)
        }
    }

    /**
     * Collect resources and styleables by parsing R symbol file
     * @param RSymbolFile R symbol file records the resource entries
     * @param resourcesMap Map used to store resources
     * @param styleableList List used to store styleables
     */
    private void parseResEntries(File RSymbolFile, ListMultimap resourcesMap, List styleableList) {
        if (!RSymbolFile.exists()) {
            return
        }
        RSymbolFile.eachLine { line ->
            /**
             *  Line Content:
             *  Common Res:  int string abc_action_bar_home_description 0x7f090000
             *  Styleable:   int[] styleable TagLayout { 0x010100af, 0x7f0102b5, 0x7f0102b6 }
             *            or int styleable TagLayout_android_gravity 0
             */
            if (!line.empty) {
                def tokenizer = new StringTokenizer(line)
                def valueType = tokenizer.nextToken()     // value type (int or int[])
                def resType = tokenizer.nextToken()      // resource type (attr/string/color etc.)
                def resName = tokenizer.nextToken()
                def resId = tokenizer.nextToken('\r\n').trim()

                def entry
                if (resType == 'styleable') {
                    entry = new StyleableEntry(resName, resId, valueType)
                    styleableList.add(entry)
                } else {
                    entry = new ResourceEntry(resType, resName, Integer.decode(resId))
                    resourcesMap.put(resType, entry)
                }
            }
        }
        if (showLog) {
            println 'resourcesMap size: ' + resourcesMap.size()
            println 'styleableList size: ' + styleableList.size()
        }
    }

    /**
     * Filter out the resources that need to be retained in the plugin apk,
     * pluginResources = allResources - hostResources
     */
    private void filterPluginResources() {
        def a = 0
        int b = 0
        int c = 0
        int d = 0
        int LIMIT = 6
        allResources.values().each {

            def index = hostResources.get(it.resourceType).indexOf(it)
            if (index >= 0){
                /**
                 * If the resource entry exists in host apk, assign the host resource ID of this entry
                 * as the new resource id.
                 * Then replace the object reference in host resource collection with the object
                 * in all resource collection, to make both of them point to the same object
                 */
                it.newResourceId = hostResources.get(it.resourceType).get(index).resourceId
                hostResources.get(it.resourceType).set(index, it)
                if (showLog && a < LIMIT) {
                    println 'resource entry exists in common' + it
                    a++
                }
            } else {
                pluginResources.put(it.resourceType, it)
                if (showLog && b < LIMIT) {
                    println 'resource entry not exists in common' + it
                    b++
                }
            }
        }

        allStyleables.each {
            def index = hostStyleables.indexOf(it)
            if(index >= 0) {
                /**
                 * Do not support the same name but different content styleable entry
                 */
                it.value = hostStyleables.get(index).value
                hostStyleables.set(index, it)
                if (showLog && c < LIMIT) {
                    println 'styleable entry exists in common' + it
                    c++
                }
            } else {
                pluginStyleables.add(it)
                if (showLog && d < LIMIT) {
                    println 'styleable entry not exists in common' + it
                    d++
                }
            }
        }

        if (showLog) {
            println 'pluginResources size: ' + pluginResources.size()
            pluginResources.values().each {
                println it
            }
            println 'pluginStyleables size: ' + pluginStyleables.size()
            pluginStyleables.each {
                println it
            }
        }
    }

    /**
     * Reassign the ID for resources need retained in the plugin apk
     * Set the packageId specified in the build.gradle file, and reassign type&entry ID
     */
    private void reassignPluginResourceId() {
        //The value of aar type should be 1
        def attrTypeId = 1
        //Other types  are allocated from 2
        def lastTypeId = 2
        pluginResources.keySet().each { String resType ->
            def typeId = 0
            def entryId = 0
            if (resType == 'attr') {
                typeId = attrTypeId
            } else {
                typeId = lastTypeId++
            }
            pluginResources.get(resType).each {
                it.setNewResourceId(extension.packageId, typeId, entryId++)
            }
        }

        List<ResourceEntry> attrEntries = allResources.get('attr')

        pluginStyleables.findAll { it.valueType == 'int[]'}.each { StyleableEntry styleableEntry->
            List<String> values = styleableEntry.valueAsList
            values.eachWithIndex { hexResId, idx ->
                ResourceEntry resEntry = attrEntries.find { it.hexResourceId == hexResId }
                values[idx] = resEntry?.hexNewResourceId
            }
            styleableEntry.value = values
        }

        if (showLog) {
            println '=======reassignPluginResourceId'
            println 'pluginResources size: ' + pluginResources.size()
            pluginResources.values().each {
                println it
            }
            println 'pluginStyleables size: ' + pluginStyleables.size()
            pluginStyleables.each {
                println it
            }
        }
    }

    /**
     * Collect all resources the aar project can access
     * @param aarDependenceInfo aar dependence info
     */
    def gatherReservedAarResources(AndroidDependency aarDependenceInfo) {
        def aarResKeys = [] as Set<String>

        def rSymbol = aarDependenceInfo.symbolFile
        if (rSymbol.exists()) {
            rSymbol.eachLine { line ->
                if (!line.empty) {
                    def tokenizer = new StringTokenizer(line)
                    def valueType = tokenizer.nextToken()
                    def resType = tokenizer.nextToken()       // resource type (attr/string/color etc.)
                    def resName = tokenizer.nextToken()       // resource name

                    aarResKeys.add("${resType}:${resName}")
                }
            }
        }
        if (aarResKeys.empty) {
            return
        }
        allResources.keySet().each { resType ->
            allResources.get(resType).each { resEntry ->
                if (aarResKeys.contains("${resType}:${resEntry.resourceName}")) {
                    extension.aarResources.put(resType, resEntry)
                }
            }
        }

        extension.aarStyleables = allStyleables.findAll { styleableEntry ->
            aarResKeys.contains("styleable:${styleableEntry.name}")
        }

        if (showLog) {
            println '=======gatherReservedAarResources'
            println 'pluginResources size: ' + extension.aarResources.size()
//            extension.aarResources.values().each {
//                println it
//            }
            println 'pluginStyleables size: ' + extension.aarStyleables.size()
//            extension.aarStyleables.each {
//                println it
//            }
        }
    }

    /**
     * Returns the mapping from the original ID to the redistributed ID
     */
    def getResIdMap() {
        def idMap = [:] as Map<Integer, Integer>
        allResources.values().each { resEntry ->
            idMap.put(resEntry.resourceId, resEntry.newResourceId)
        }
        return idMap
    }
//
//
//    private void dump() {
//        final def resSplitDir = new File(project.buildDir, 'generated')
//
//        final def retainTypeFile = new File(resSplitDir, 'retainType.txt')
//        if (!retainTypeFile.exists()) {
//            retainTypeFile.createNewFile()
//        }
//        retainTypeFile.withPrintWriter { pw ->
//            pluginResources.values().each {
//                pw.println "${it.resourceType} ${it.resourceName} 0x${Integer.toHexString(it.resourceId)} 0x${Integer.toHexString(it.newResourceId)}"
//            }
//            pw.println "****************Styleables*****************"
//            pluginStyleables.each {
//                pw.println "${it.name} ${it.valueType} ${it.value}"
//            }
//        }
//
//
//        final def allTypeFile = new File(resSplitDir, "allType.txt")
//        if (!allTypeFile.exists()) {
//            allTypeFile.createNewFile()
//        }
//        allTypeFile.withPrintWriter { pw ->
//            allResources.values().each {
//                pw.println "${it.resourceType} ${it.resourceName} 0x${Integer.toHexString(it.resourceId)} 0x${Integer.toHexString(it.newResourceId)}"
//            }
//            pw.println "****************Styleables*****************"
//            allStyleables.each {
//                pw.println "${it.name} ${it.valueType} ${it.value}"
//            }
//        }
//
//        final def vendorTypeFile = new File(resSplitDir, 'vendorType.txt')
//        if (!vendorTypeFile.exists()) {
//            vendorTypeFile.createNewFile()
//        }
//
//        vendorTypeFile.withPrintWriter { pw ->
//            extension.retainedAarLibs.each { aarLib ->
//                pw.println "${aarLib.name}"
//
//                aarLib.aarResources.values().each {
//                    pw.println "${it.resourceType} ${it.resourceName} 0x${Integer.toHexString(it.resourceId)} 0x${Integer.toHexString(it.newResourceId)}"
//                }
//            }
//        }
//    }

}